calc_chisq_probability
    # 
    # Note:
    #  This code is used to recompute chisquare with radio data point
    #  and output the best fit and the uncertainties
    #  see http://www.astro.sunysb.edu/metchev/PHY515/astrostatistics.html
    # 
    # Usage:
    #  macro read rChisq.sm calc_chisq_probability
    # 
    # Last update:
    #    20151101
    # 
    # 
    macro read pChisq.sm
    define FileEpsNoOutput 1
    define FileFitNoOutput 1
    define NumberOfSolution 1
    data "fit.out" read {ccchi2 2}
    echo Number of all chi2 solution is $(dimen(ccchi2))
    !rm "fit_rchisq.dat" 2>/dev/null
    define PrintHeaderOnce 0
    !echo -n "Recomputing chi-square ... ''"
    set cccid_interval = int(float(dimen(ccchi2))/30.0)
    stats_med ccchi2 ccchi2MEDIAN ccchi2SIQR
    echo Number of low chi2 solution is $(sum(ccchi2<0.75*$ccchi2MEDIAN))
    do cccid = 0,dimen(ccchi2)-1 {
        set cid = $cccid
        # print progress percentage
        if(0==(cid%cccid_interval)) {
            !printf "%.0f%%%1s" $(float(cid)/dimen(ccchi2)*100.0) ""
        }
        # run pChisq.sm routine to compute the chi2 with radio
        if($cccid==0 || ccchi2[cid]<0.75*$ccchi2MEDIAN) {
            define rChisq_PreVerbose $verbose verbose 0
            if($cccid==0) {
                input run_plotting.sm
                #plotChisq "flux_obsframe.dat" \
                #          "FSPS.Padova.BaSeL.Z0.0190.EBV.lib.SED" \
                #          "DL07.HiExCom.lib.SED" \
                #          "DL07.LoExCom.lib.SED" \
                #          "fit_triple.out"
            } else {
                plotChisqInnerRoutine
            }
            verbose $rChisq_PreVerbose
        } else {
            set original_chi2 = 1e10
            set recomputed_chi2 = 1e10
            set Umean = -99.0
            set Mdust = -99.0
            set LTIR = -99.0
            set Mstar = -99.0
            set EBV = -99.0
        }
        # output to fit_rchisq.dat
        set cid = $cccid
        if($PrintHeaderOnce>0) {define print_noheader 1} else {define print_noheader 0}
        print +"fit_rchisq.dat" '%15d%20g%20g%15g%15g%15g%15g%15g\n' \
            {cid original_chi2 recomputed_chi2 Umean Mdust LTIR Mstar EBV}
        define PrintHeaderOnce 1
    }
    !echo "100%!"
    undef FileEpsNoOutput
    undef FileFitNoOutput
    #!cat "fit_rchisq.dat"







calc_uncertainty_of_U
    calc_uncertainty_and_plot_Umean
calc_uncertainty_and_plot_Umean
    # 
    #  macro read rChisq.sm calc_uncertainty_and_plot_Umean
    #  
    # #<added><20151012><dzliu># also consider radio data point
    # #<added><20151101><dzliu># faster speed, better code
    # 
    read_chi2_data
    get_chi2_probability chisq lgUmean $(lg(0.05)) $(lg(30)) 0.05
    set lgUmean = got_par_array set Umean = 10**lgUmean
    set chisq = got_chi_array set revchisq = 1.0/got_chi_array #<TODO># reduced chi square needs to be divided by N_data
    calc_uncertainty_of Umean
    #<fixed># calc_uncertainty_ after get_chi2_probability -- so that the xvar-chi2 distribution is a smooth curve
    load crabPlotHistogram.sm
    set crabPlotHistogram_KeepDevice = 1
    set crabPlotHistogram_ticksize = '-1 10 0 0'
    set crabPlotHistogram_xlimit = <$(lg(0.05)) $(lg(50))> # (lgUmean*0.85) concat (lgUmean*1.15)
    set crabPlotHistogram_xlabel = '<U>'
    set crabPlotHistogram_ylabel = '1/\\chi^2'
    crabPlotHistogram_xy "plot_chi2_probability_against_U.pdf" lgUmean revchisq
    ctype magenta ltype 1 rel $fx1 $(1.0/($chisqMIN+$chisqDELTA)) 
                         draw $fx2 $(1.0/($chisqMIN+$chisqDELTA))
    ctype default ltype 0 device nodevice
    print "plot_chi2_probability_against_U.txt" {Umean chisq revchisq}



calc_uncertainty_of_Mdust
    calc_uncertainty_and_plot_Mdust
calc_uncertainty_and_plot_Mdust
    # 
    #  macro read rChisq.sm calc_uncertainty_and_plot_Mdust
    #  
    # #<added><20151012><dzliu># also consider radio data point
    # #<added><20151101><dzliu># faster speed, better code
    # 
    read_chi2_data
    calc_uncertainty_of Mdust
    # 
    get_chi2_probability chisq lgMdust 7.0 11.0 0.1
    set lgMdust = got_par_array set Mdust = 10**lgMdust
    set chisq = got_chi_array set revchisq = 1.0/got_chi_array #<TODO># reduced chi square needs to be divided by N_data
    load crabPlotHistogram.sm
    set crabPlotHistogram_KeepDevice = 1
    set crabPlotHistogram_ticksize = '-1 10 0 0'
    set crabPlotHistogram_xlimit = {7.0 11.0}
    set crabPlotHistogram_xlabel = 'M_{dust}'
    set crabPlotHistogram_ylabel = '1/\\chi^2'
    crabPlotHistogram_xy "plot_chi2_probability_against_Mdust.pdf" lgMdust revchisq
    ctype magenta ltype 1 rel $fx1 $(1.0/($chisqMIN+$chisqDELTA)) 
                         draw $fx2 $(1.0/($chisqMIN+$chisqDELTA))
    ctype default ltype 0 device nodevice
    print "plot_chi2_probability_against_Mdust.txt" {Mdust chisq revchisq}
    


calc_uncertainty_of_Mstar
    calc_uncertainty_and_plot_Mstar
calc_uncertainty_and_plot_Mstar
    # 
    #  macro read rChisq.sm calc_uncertainty_and_plot_Mstar
    #  
    # #<added><20151012><dzliu># also consider radio data point
    # #<added><20151101><dzliu># faster speed, better code
    # 
    read_chi2_data
    calc_uncertainty_of Mstar
    # 
    get_chi2_probability chisq lgMstar 8.0 13.0 0.1
    set lgMstar = got_par_array set Mstar = 10**lgMstar
    set chisq = got_chi_array set revchisq = 1.0/got_chi_array #<TODO># reduced chi square needs to be divided by N_data
    load crabPlotHistogram.sm
    set crabPlotHistogram_KeepDevice = 1
    set crabPlotHistogram_ticksize = '-1 10 0 0'
    set crabPlotHistogram_xlimit = {8.0 13.0}
    set crabPlotHistogram_xlabel = 'M_{star}'
    set crabPlotHistogram_ylabel = '1/\\chi^2'
    crabPlotHistogram_xy "plot_chi2_probability_against_Mstar.pdf" lgMstar revchisq
    ctype magenta ltype 1 rel $fx1 $(1.0/($chisqMIN+$chisqDELTA)) 
                         draw $fx2 $(1.0/($chisqMIN+$chisqDELTA))
    ctype default ltype 0 device nodevice
    print "plot_chi2_probability_against_Mstar.txt" {Mstar chisq revchisq}



calc_uncertainty_of_LIR
    calc_uncertainty_and_plot_LTIR
calc_uncertainty_and_plot_LTIR
    # 
    #  macro read rChisq.sm calc_uncertainty_and_plot_LTIR
    #  
    # #<added><20151012><dzliu># also consider radio data point
    # #<added><20151101><dzliu># faster speed, better code
    # 
    read_chi2_data
    calc_uncertainty_of LTIR
    # 
    get_chi2_probability chisq lgLTIR 10.0 14.0 0.010
    set lgLTIR = got_par_array set LTIR = 10**lgLTIR
    set chisq = got_chi_array set revchisq = 1.0/got_chi_array #<TODO># reduced chi square needs to be divided by N_data
    load crabPlotHistogram.sm
    set crabPlotHistogram_KeepDevice = 1
    set crabPlotHistogram_ticksize = '-1 10 0 0'
    set crabPlotHistogram_xlimit = {10.0 14.0}
    set crabPlotHistogram_xlabel = 'L_{IR,8-1000{\\mu}m}'
    set crabPlotHistogram_ylabel = '1/\\chi^2'
    crabPlotHistogram_xy "plot_chi2_probability_against_LIR.pdf" lgLTIR revchisq
    ctype magenta ltype 1 rel $fx1 $(1.0/($chisqMIN+$chisqDELTA)) 
                         draw $fx2 $(1.0/($chisqMIN+$chisqDELTA))
    ctype default ltype 0 device nodevice
    print "plot_chi2_probability_against_LIR.txt" {LTIR chisq revchisq}





read_chi2_data 00
    # 
    # Read the default data file path "fit_rchisq.dat" #<TODO>#
    # We will load these variables: chisq, LTIR, Umean, Mdust, Mstar, EBV
    # 
    ##input "input_redshift.sm"
    load rfile.sm rfile "fit_rchisq.dat"
    set lgMstar = (Mstar>0) ?      Mstar  : 1e-1
    set lgMstar = (Mstar>0) ? lg(lgMstar) : -99 #<TODO># /(1+z) Only for the fitting with old pChisq.sm before 20160515
    set lgMdust = (Mdust>0) ?      Mdust  : 1e-1
    set lgMdust = (Mdust>0) ? lg(lgMdust) : -99
    set lgUmean = (Umean>0) ?      Umean  : 1e-1
    set lgUmean = (Umean>0) ? lg(lgUmean) : -99
    set lgLTIR  = (LTIR>0)  ?      LTIR   : 1e-1
    set lgLTIR  = (LTIR>0)  ? lg(lgLTIR)  : -99
    set chisq = recomputed_chi2

calc_uncertainty_of 01
    # 
    # Usage: 
    #  macro read rChisq.sm calc_uncertainty_of Umean
    #  
    if($?1==0) {return}
    # 
    # Select the range of chi2 solutions corresponding to a probability of 68%
    # 
    define chisqDELTA 2.3 #<TODO># http://www.astro.sunysb.edu/metchev/PHY515/astrostatistics.html
    vecminmax chisq chisqMIN chisqMAX
    set xcoo = (chisq<=($chisqMIN+$chisqDELTA))
    if(sum(xcoo)>0) {
        set xvar = $1 if(xcoo)
        set xchisq = chisq if(xcoo)
        sort {xvar xchisq}
        vecminmax xvar xvarMIN xvarMAX
        #set sp_xvar = $xvarMIN,$xvarMAX,$(($xvarMAX-$xvarMIN)/20.0)
        #spline xvar xchisq sp_xvar sp_xchisq
        #vecminmax sp_xchisq xvarMIN xvarMAX
        set xvarMIN = float($xvarMIN)
        set xvarMAX = float($xvarMAX)
        set xvarDEV = float($xvarMAX-$xvarMIN)/2.0
        set xvarCEN = float($xvarMAX+$xvarMIN)/2.0
        set xvarMIN_log10 = lg(xvarMIN)
        set xvarMAX_log10 = lg(xvarMAX)
        set xvarDEV_log10 = (xvarMAX_log10-xvarMIN_log10)/2.0 # (xvarDEV/xvarCEN)
        set xvarCEN_log10 = (xvarMAX_log10+xvarMIN_log10)/2.0
    } else { # no good chisq solution
        set xvarMIN = float(-99)
        set xvarMAX = float(-99)
        set xvarDEV = float(-99)
        set xvarCEN = float(-99)
        set xvarMIN_log10 = float(-99)
        set xvarMAX_log10 = float(-99)
        set xvarDEV_log10 = float(-99)
        set xvarCEN_log10 = float(-99)
    }
    if(abs(xvarMAX)>1e5 || abs(xvarMAX)<1e-5) {
        define xvarFMT "%13.6e"
        define xvarFMT_log10 "%10.3f"
    } else {
        define xvarFMT "%13.6f"
        define xvarFMT_log10 "%10.3f"
    }
    # 
    echo "Writing to bestfit_"$1"_range.txt"
    if(0==$?print_noheader) {define print_noheader 0}
    define rChisq_PrePrintNoHeader $print_noheader define print_noheader 1
    print "bestfit_"$1"_range.txt" '\n' {}
    print +"bestfit_"$1"_range.txt" 'Lower $1 = $xvarFMT\n' {xvarMIN}
    print +"bestfit_"$1"_range.txt" 'Upper $1 = $xvarFMT\n' {xvarMAX}
    print +"bestfit_"$1"_range.txt" 'Error $1 = $xvarFMT\n' {xvarDEV}
    print +"bestfit_"$1"_range.txt" 'Value $1 = $xvarFMT\n' {xvarCEN}
    print +"bestfit_"$1"_range.txt" '\n' {}
    # <added> log10
    print "bestfit_"$1"_range_log10.txt" '\n' {}
    print +"bestfit_"$1"_range_log10.txt" 'Lower $1 = $xvarFMT_log10\n' {xvarMIN_log10}
    print +"bestfit_"$1"_range_log10.txt" 'Upper $1 = $xvarFMT_log10\n' {xvarMAX_log10}
    print +"bestfit_"$1"_range_log10.txt" 'Error $1 = $xvarFMT_log10\n' {xvarDEV_log10}
    print +"bestfit_"$1"_range_log10.txt" 'Value $1 = $xvarFMT_log10\n' {xvarCEN_log10}
    print +"bestfit_"$1"_range_log10.txt" '\n' {}
    define print_noheader $rChisq_PrePrintNoHeader

get_chi2_probability 05
    # 
    set chi_arr = $1
    set par_arr = $2
    get_hist par_arr par_base par_hist $3 $4 $5
    set par_interval = $5
    declare got_par_array 0
    declare got_chi_array 0
    do i=0,dimen(par_base)-1 {
        set bin_coo = (par_arr>=(par_base[$i]-par_interval/2) && \
                       par_arr<(par_base[$i]+par_interval/2))
        if(sum(bin_coo)>0) {
            set bin_arr = chi_arr if(bin_coo)
            vecminmax bin_arr bin_min bin_max
            set got_chi_array = got_chi_array concat $bin_min
            set got_par_array = got_par_array concat $(par_base[$i])
            # echo $(par_base[$i]-par_interval/2) -- $(par_base[$i]+par_interval/2) -- $bin_min
        }
    }

plot_chi2_probability_of
    # 
    # Usage:
    #  macro read  rChisq.sm plot_chi2_probability_of Mdust
    # 
    return

    











    

















plot_chi2_probability_against_flux 01
    # 
    #  macro read "p2chi2_probability.sm" plot_chi2_probability_against_flux
    # 
    if($?1==0) {print 'Usage: plot_chi2_probability_against_flux 1000.0 \# --> SED flux at 1000.0um.\n' {} return}
    data "fit_double.out" read {i0 1 chisq 2 i1 3 a1 4 i2 5 a2 6 Umin1 7 Umin2 9}
    data "recomputed_chi2.dat" read {chisq 1} #<added><20151012><dzliu># also consider radio data point
    set coo = (a1>0 && a2>0 && Umin1==Umin2)
    foreach var {chisq i1 a1 i2 a2 Umin1 Umin2} {set $var = $var if(coo)}
    define wave <"$1"> #<TODO># 
    declare flux 0
    if(is_file("input_redshift.sm")) {
        input "input_redshift.sm"
    } else {
        print 'Error! Could not find input_redshift.sm!\n' {}
        return
    }
    if(is_file("p2chi2.sm")) {
        macro read "p2chi2.sm"
    } else {
        if(is_file("../p2chi2.sm")) {
            macro read "../p2chi2.sm"
        } else {
            if(is_file("../../../p2chi2.sm")) {
                macro read "../../../p2chi2.sm"
            } else {
                print 'Error! Could not find p2chi2.sm!\n' {}
                return
            }
        }
    }
    load astroSfig.sm
    if(is_file("flux_obsframe.dat"))            {set FileObs = {"flux_obsframe.dat"}}
    if(is_file("../../../DL07.HiExCom.lib.SED")){set FileLi1 = {"../../../DL07.HiExCom.lib.SED"}}
    if(is_file("../../../DL07.LoExCom.lib.SED")){set FileLi2 = {"../../../DL07.LoExCom.lib.SED"}}
    if(is_file("../DL07.HiExCom.lib.SED"))      {set FileLi1 = {"../DL07.HiExCom.lib.SED"}}
    if(is_file("../DL07.LoExCom.lib.SED"))      {set FileLi2 = {"../DL07.LoExCom.lib.SED"}}
    if(is_file("DL07.HiExCom.lib.SED"))         {set FileLi1 = {"DL07.HiExCom.lib.SED"}}
    if(is_file("DL07.LoExCom.lib.SED"))         {set FileLi2 = {"DL07.LoExCom.lib.SED"}}
    set FileOut = {"fit_double.out"}
    set FileEps = {"fit_double.eps"}
    do i=0,dimen(a1)-1 {
        # 
        set SPIwc = -2,5.5,0.01
        # 
        readLibSED $(FileLi1) $(i1[$i])
        set w1 = lg(SEDwave * opz)
        set f1 = lg(SEDflux * a1[$i])
        set SPIw1 = SPIwc
        vecminmax w1 SPLw1 SPUw1
        spline w1 f1 SPIw1 SPIf1
        set SPIf1 = (SPIw1<$SPLw1) ? -99 : SPIf1
        set SPIf1 = (SPIw1>$SPUw1) ? -99 : SPIf1
        set wave1 = lg(float($wave))
        spline SPIw1 SPIf1 wave1 flux1
        set flux1 = 10**flux1
        # 
        readLibSED $(FileLi2) $(i2[$i])
        set w2 = lg(SEDwave * opz)
        set f2 = lg(SEDflux * a2[$i])
        set SPIw2 = SPIwc
        vecminmax w2 SPLw2 SPUw2
        spline w2 f2 SPIw2 SPIf2
        set SPIf2 = (SPIw2<$SPLw2) ? -99 : SPIf2
        set SPIf2 = (SPIw2>$SPUw2) ? -99 : SPIf2
        set wave2 = lg(float($wave))
        spline SPIw2 SPIf2 wave2 flux2
        set flux2 = 10**flux2
        # 
        set flux = flux concat $(flux1+flux2)
        # 
        set _i0 = i0[$i] set _chisq = chisq[$i] set _flux = flux[$i]
        if($i==0) { define print_noheader 0 
            print "fit_double_computed_flux_"$wave".out" '%15.0f%15g%15g%15g%15g\n' {_i0 _chisq _flux flux1 flux2}
        } else { define print_noheader 1 
            print +"fit_double_computed_flux_"$wave".out" '%15.0f%15g%15g%15g%15g\n' {_i0 _chisq _flux flux1 flux2}
        } define print_noheader 0
    }
    
    # compute eLtir
    define chisqDELTA 2.3
    vecminmax chisq chisqMIN chisqMAX
    set cooflux = (chisq<=($chisqMIN+$chisqDELTA))
    if(sum(cooflux)>0) {
        set goodflux = flux if(cooflux)
        vecminmax goodflux goodfluxMIN goodfluxMAX
        set goodfluxMIN = $goodfluxMIN
        set goodfluxMAX = $goodfluxMAX
        set goodfluxDELTA = ($goodfluxMAX-$goodfluxMIN)/2.0
    } else { # no good chisq solution
        define goodfluxMIN -99
        define goodfluxMAX 99
        set goodfluxMIN = $goodfluxMIN
        set goodfluxMAX = $goodfluxMAX
        set goodfluxDELTA = ($goodfluxMAX-$goodfluxMIN)/2.0
    }
    define print_noheader 1
    echo "Writing to bestfit_flux_"$wave"_range.txt"
    print "bestfit_flux_"$wave"_range.txt" '\n' {}
    print +"bestfit_flux_"$wave"_range.txt" 'Lower flux $wave = %g\n' {goodfluxMIN}
    print +"bestfit_flux_"$wave"_range.txt" 'Upper flux $wave = %g\n' {goodfluxMAX}
    print +"bestfit_flux_"$wave"_range.txt" 'Error flux $wave = %g\n' {goodfluxDELTA}
    print +"bestfit_flux_"$wave"_range.txt" '\n' {}
    define print_noheader 0
    
    set lgflux = lg(flux)
    get_chi2_probability chisq lgflux -2.0 2.0 0.025
    set lgLbase = got_par_array
    set flux = 10**lgLbase
    set chisq = got_chi_array
    set revchisq = 1.0/got_chi_array
    load crabPlotHistogram.sm
    set crabPlotHistogram_ticksize = '-1 10 0 0'
    set crabPlotHistogram_xlabel = 'f_{$wave{\\mu}m}'
    set crabPlotHistogram_ylabel = '1/\\chi^2'
    set crabPlotHistogram_xlimit = {-2.0 2.0}
    crabPlotHistogram_xy "plot_chi2_probability_against_flux_"$wave".pdf" lgLbase revchisq
    #!open "plot_chi2_probability_against_flux.pdf"
    print "plot_chi2_probability_against_flux_"$wave".txt" {flux chisq revchisq}






