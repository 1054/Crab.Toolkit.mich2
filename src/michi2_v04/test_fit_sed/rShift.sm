redShift 02
    # 
    # redshift the ir sed from obsframe to restframe
    # because the sed library is restframe
    # 
    # macro read rShift.sm redShift 3.042
    # 
    if($?1==0){print 'Usage: redShift 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set z = float($1)
    set wave = wave / (1.0+z)
    set f    =    f    # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df 
    rShift_write_flux_restframe

redShift_maskout_LowSNR 02
    # 
    # redshift the ir sed from obsframe to restframe
    # because the sed library is restframe
    # 
    # macro read rShift.sm redShift_maskout_LowSNR 3.06357
    # 
    if($?1==0){print 'Usage: redShift 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set coosnr = (f >= 3.0 * df)
    set z = float($1)
    set wave = wave / (1.0+z) if(coosnr) 
    set f    =    f           if(coosnr) # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df           if(coosnr)    
    rShift_write_flux_restframe

redShift_maskout_LowSNR_25 02
    # 
    # redshift the ir sed from obsframe to restframe
    # because the sed library is restframe
    # 
    # macro read rShift.sm redShift_maskout_LowSNR_25 3.06357
    # 
    if($?1==0){print 'Usage: redShift 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set coosnr = (f > 2.5 * df)
    set z = float($1)
    set wave = wave / (1.0+z) if(coosnr) 
    set f    =    f           if(coosnr) # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df           if(coosnr)    
    rShift_write_flux_restframe

redShift_maskout_NIR_Radio 02
    # 
    if($?1==0){print 'Usage: redShift 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set z = float($1)
    set wave = wave / (1.0+z)
    set coo = (wave>=8 && wave<=1.5e3 && f>=0.0 && df<1e20)   # only use restframe 8um to 1500um # <TODO> maskout df>1e20
    set wave = wave if(coo)
    set f    =    f if(coo)   # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df if(coo)
    rShift_write_flux_restframe

redShift_maskout_Radio 02
    # 
    if($?1==0){print 'Usage: redShift 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set z = float($1)
    set wave = wave / (1.0+z)
    #set coo = (wave>=0 && wave<=1.5e3 && f>=0.0 && df<1e20)   # only use restframe 0um to 1500um # <TODO> maskout df>1e20
    set coo = (wave>=0 && wave<=1.5e3 && f>=3.*df)   # only use restframe 0um to 1500um # <TODO> maskout df>1e20
    set wave = wave if(coo)
    set f    =    f if(coo)   # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df if(coo)
    rShift_write_flux_restframe

redShift_maskout_Radio_fit_UpperLimit_as_2Sigma 02
    # 
    if($?1==0){print 'Usage: redShift_maskout_Radio_fit_UpperLimit_as_2Sigma 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set z = float($1)
    set wave = wave / (1.0+z)
    set coo = (wave>=0 && wave<=1.5e3 && df<1e3)   # only use restframe 0um to 1500um # <20160502> maskout df>1e3 <20160511> removed f>=0 condition
    set wave = wave if(coo)
    set f    =    f if(coo)   # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df if(coo)
    set f = (f<2.0*df) ? f+2.0*df : f # <20160511> for upper limits we fit their f+2*sigma value
    rShift_write_flux_restframe

redShift_maskout_Radio_use_UpperLimit 02
    # 
    if($?1==0){print 'Usage: redShift_maskout_Radio_use_UpperLimit 1.325 --> convert "flux_obsframe.dat" to "flux_restframe.dat"\n' {}}
    if($?2==0){define redShift_fmark "."} else {define redShift_fmark "_"$2"."}
    rShift_read_flux_obsframe
    set z = float($1)
    set wave = wave / (1.0+z)
    set coo = (wave>=0 && wave<=1.5e3 && df<1e3)   # only use restframe 8um to 1500um # <20160502> maskout df>1e3 <20160511> removed f>=0 condition
    set wave = wave if(coo)
    set f    =    f if(coo)   # flux is mJy, 1e-26 erg s-1 cm-2 Hz-1
    set df   =   df if(coo)
    set f = (f<3.0*df) ? 3.0*df : f # <20160511> for upper limits we fit their 3-sigma value
    # set f = (!coo && f<3*df) ? f+df*2.0 : f # <20160502> for upper limits we fit their 3-sigma value
    rShift_write_flux_restframe

rShift_read_flux_obsframe 01
    # 
    # read the "flux_obsframe.dat"
    # macro read rShift.sm rShift_read_flux_obsframe
    # 
    if($?1) {set rShift_file = <"$1">} else {set rShift_file = {"flux_obsframe.dat"}} #<TODO># the default input file name
    define rShift_PreVerbose $verbose verbose 0
    data $(rShift_file)
    if(!is_file($(rShift_file))) { 
        print 'Error! \"$(rShift_file)\" was not found!\n' {} 
        define ErrorBreak 1
        define ErrorBreak ? <Press Ctrl+C to break!>
        return
    }
    read {wave 1 f 2 df 3}
    verbose $rShift_PreVerbose
    #<fixed><20151102><dzliu># fix negative flux in MonteCarlo simulations
    set f = f<0.0 ? 0.0 : f
    #<added><20151102><dzliu># set an upper limit S/N=10 for the S/N ratio
    set snrid = 0,dimen(f)-1 set snrid = snrid if(df>0)
    set snr = f*0.0 set snr[snrid] = f[snrid]/df[snrid]
    set df = snr>10.0 ? f/10.0 : df
    #<added><20151102><dzliu># for compatible 
    set f0 = f set w0 = wave

rShift_write_flux_restframe 00
    # 
    # write the "input_redshift.sm"
    # and the "flux_restframe.dat"
    # 
    sort {wave f df}
    print "flux_restframe"$redShift_fmark"dat" '%15g%15g%15g\n' {wave f df}
    define print_noheader 1
    print "input_redshift"$redShift_fmark"sm" 'set z = %g\n' {z}
    print +"input_redshift"$redShift_fmark"sm" 'set opz = 1.0+%g\n' {z}
    !echo "set dL = "\$(lumdist -simple $(z)) >> "input_redshift"$redShift_fmark"sm"
    !echo ""                                  >> "input_redshift"$redShift_fmark"sm"
    !cat "input_redshift"$redShift_fmark"sm"
    define print_noheader 0









